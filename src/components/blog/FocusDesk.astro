---
import Title from "@components/global/Title.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section>
	<div class="top-[-10rem]transform-gpu absolute inset-x-0 overflow-hidden blur-3xl sm:top-[-20rem]" aria-hidden="true">
		<div class="gradient-element"></div>
	</div>
	<div class="mx-auto flex flex-col gap-16 px-8 py-12 md:px-12 lg:pt-16 2xl:max-w-7xl">
		<!-- svg: first layer -->
		<svg class="hidden" viewBox="0 0 250 250" xmlns="http://www.w3.org/2000/svg">
			<filter id="article-noise-filter">
				<feTurbulence type="fractalNoise" baseFrequency="0.8" numOctaves="3" stitchTiles="stitch"></feTurbulence>
			</filter>
		</svg>
		
		<Title title="Focus Mode" subtitle="Your Digital Study Desk" class="pb-6 pt-8 uppercase" />
		
		<!-- Main Content Area -->
		<div class="grid grid-cols-1 lg:grid-cols-3 gap-8 min-h-[600px]">
			<!-- Focus Monitor & Notes - Left Side (2/3 width) -->
			<div class="lg:col-span-2 space-y-6">
				<!-- Large Camera Feed Section -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-2xl font-semibold mb-6 text-black text-center">Focus Monitor</h3>
					
					<!-- Camera Display - Much Larger -->
					<div class="relative bg-black/50 rounded-lg overflow-hidden mb-6 aspect-video h-96">
						<video id="cameraFeed" autoplay muted class="w-full h-full object-cover"></video>
						<div id="cameraPlaceholder" class="absolute inset-0 flex items-center justify-center text-white/60">
							<div class="text-center">
								<svg class="w-24 h-24 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M4 5a2 2 0 00-2 2v6a2 2 0 002 2h12a2 2 0 002-2V7a2 2 0 00-2-2h-1.586l-.707-.707A1 1 0 0013 4H7a1 1 0 00-.707.293L5.586 5H4zm6 9a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path>
								</svg>
								<p class="text-lg">Camera Disabled</p>
							</div>
						</div>
					</div>

					<!-- Camera Controls -->
                     
					<div class="grid grid-cols-2 gap-4 mb-4">
						<button id="toggleCamera" class="w-full squircle-bg rounded-lg bg-zinc-900 text-white transition-all hover:bg-orange-100 hover:text-black py-3 px-6 text-lg font-medium mb-4" disabled>
						Enable Camera
					</button>
						
					</div>
					
					<!-- Timelapse Controls -->
					<div class="space-y-4 mb-4">
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Capture Interval</label>
							<div class="flex items-center gap-3">
								<input type="range" id="intervalSlider" min="100" max="5000" value="1000" 
									class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
								<span id="intervalValue" class="text-sm font-medium text-black min-w-[60px]">1.0s</span>
							</div>
						</div>
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Playback Speed</label>
							<div class="flex items-center gap-3">
								<input type="range" id="speedSlider" min="5" max="60" value="30" 
									class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
								<span id="speedValue" class="text-sm font-medium text-black min-w-[60px]">30 FPS</span>
							</div>
						</div>
					</div>
					
					<div class="grid grid-cols-2 gap-4 mb-4">
						<button id="startTimelapse" class="squircle-bg rounded-lg bg-green-600 text-white transition-all hover:bg-orange-100 hover:text-black py-3 px-6 text-lg font-medium" disabled>
							▶ Start Timelapse
						</button>
						<button id="stopTimelapse" class="squircle-bg rounded-lg bg-red-600 text-white transition-all hover:bg-orange-100 hover:text-black py-3 px-6 text-lg font-medium" disabled>
							⏹ Stop Timelapse
						</button>
					</div>
					
					<button id="downloadTimelapse" class="w-full squircle-bg rounded-lg bg-blue-600 text-white transition-all hover:bg-orange-100 hover:text-black py-3 px-6 text-lg font-medium mb-4" disabled>
						Download Latest
					</button>
					
					<p class="text-sm text-black/50 text-center">Monitor your focus and posture during study sessions</p>
				</div>

				<!-- Session Notes -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black">Session Notes</h3>
					<textarea 
						placeholder="Take notes during your focus session..."
						class="w-full h-64 bg-white border border-gray-300 rounded-md px-3 py-2 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
					></textarea>
					<div class="mt-4 flex justify-between items-center">
						<span class="text-sm text-black/60" id="charCount">0 characters</span>
						<button class="squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black px-4 py-2">
							Save Notes
						</button>
					</div>
				</div>

				<!-- Study Session Info -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black">Current Session</h3>
					<div class="grid grid-cols-2 gap-4">
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Session Type</label>
							<select class="w-full bg-white border border-gray-300 rounded-md px-3 py-2 text-black focus:outline-none focus:ring-2 focus:ring-blue-500">
								<option value="study">Study Session</option>
								<option value="work">Work Session</option>
								<option value="creative">Creative Work</option>
								<option value="reading">Reading</option>
							</select>
						</div>
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Session Goal</label>
							<input type="text" placeholder="e.g., Complete Chapter 3" class="w-full bg-white border border-gray-300 rounded-md px-3 py-2 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500">
						</div>
					</div>
				</div>
			</div>

			<!-- Right Sidebar - Timer & Controls (1/3 width) -->
			<div class="space-y-6">
				<!-- Timer Section -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black text-center">Focus Timer</h3>
					
					<!-- Timer Display -->
					<div class="text-center mb-6">
						<div class="text-4xl font-mono font-bold text-black mb-2" id="timerDisplay">25:00</div>
						<div class="text-sm text-black/60" id="timerStatus">Ready to start</div>
					</div>

					<!-- Timer Presets -->
					<div class="grid grid-cols-3 gap-2 mb-4">
						<button class="preset-btn squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-2 text-sm" data-minutes="25">
							25m
						</button>
						<button class="preset-btn squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-2 text-sm" data-minutes="45">
							45m
						</button>
						<button class="preset-btn squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-2 text-sm" data-minutes="60">
							60m
						</button>
					</div>

					<!-- Timer Controls -->
					<div class="space-y-2">
						<button id="startBtn" class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-4">
							Start
						</button>
						<button id="pauseBtn" class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-4" disabled>
							Pause
						</button>
						<button id="resetBtn" class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-4">
							Reset
						</button>
					</div>
				</div>

				<!-- Session Stats -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black">Today's Progress</h3>
					<div class="space-y-4">
						<div class="text-center">
							<div class="text-2xl font-bold text-blue-600" id="sessionsCompleted">0</div>
							<div class="text-sm text-black/60">Sessions Completed</div>
						</div>
						<div class="text-center">
							<div class="text-2xl font-bold text-green-600" id="totalFocusTime">0m</div>
							<div class="text-sm text-black/60">Focus Time</div>
						</div>
						<div class="text-center">
							<div class="text-2xl font-bold text-purple-600" id="currentStreak">0</div>
							<div class="text-sm text-black/60">Day Streak</div>
						</div>
					</div>
				</div>

				<!-- Quick Actions -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black text-center">Quick Actions</h3>
					<div class="space-y-2">
						<button class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-4">
							Break Time
						</button>
						<button class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-4">
							Background Sounds
						</button>
						<button class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-orange-100 hover:text-black py-2 px-4">
							Do Not Disturb
						</button>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Recordings Section -->
		<div class="mt-8">
			<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
				<h3 class="text-xl font-semibold mb-4 text-black text-center">Recent Time-lapses</h3>
				<div id="recordingsList" class="space-y-4">
					<p class="text-center text-black/60 py-8">
						No recordings yet. Start your first time-lapse above!
					</p>
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	.gradient-element {
		@apply relative left-1/2 -z-10 aspect-[1155/678] w-[36.125rem] max-w-none -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#a2d4a0] to-[#aac887] opacity-30 sm:left-[calc(50%-40rem)] sm:w-[72.1875rem];
		clip-path: polygon(
			74.1% 44.1%,
			100% 61.6%,
			97.5% 26.9%,
			85.5% 0.1%,
			80.7% 2%,
			72.5% 32.5%,
			60.2% 62.4%,
			52.4% 68.1%,
			47.5% 58.3%,
			45.2% 34.5%,
			27.5% 76.7%,
			0.1% 64.9%,
			17.9% 100%,
			27.6% 76.8%,
			76.1% 97.7%,
			74.1% 44.1%
		);
	}
</style>

<script>
	interface Recording {
		id: number;
		url: string;
		blob: Blob;
		timestamp: Date;
		frameCount: number;
		fps: number;
		duration: string;
	}

	interface Window {
		timeLapse: TimeLapseRecorder;
	}

	class TimeLapseRecorder {
		private video: HTMLVideoElement | null;
		private startBtn: HTMLButtonElement | null;
		private stopBtn: HTMLButtonElement | null;
		private downloadBtn: HTMLButtonElement | null;
		private toggleCameraBtn: HTMLButtonElement | null;
		private intervalSlider: HTMLInputElement | null;
		private speedSlider: HTMLInputElement | null;
		private intervalValue: HTMLElement | null;
		private speedValue: HTMLElement | null;
		private recordingsList: HTMLElement | null;
		private cameraPlaceholder: HTMLElement | null;

		private mediaRecorder: MediaRecorder | null = null;
		private stream: MediaStream | null = null;
		private canvas: HTMLCanvasElement;
		private ctx: CanvasRenderingContext2D | null;
		private frames: string[] = [];
		private isRecording: boolean = false;
		private captureInterval: number | null = null;
		private recordings: Recording[] = [];
		private cameraEnabled: boolean = false;

		constructor() {
			this.video = document.getElementById('cameraFeed') as HTMLVideoElement;
			this.startBtn = document.getElementById('startTimelapse') as HTMLButtonElement;
			this.stopBtn = document.getElementById('stopTimelapse') as HTMLButtonElement;
			this.downloadBtn = document.getElementById('downloadTimelapse') as HTMLButtonElement;
			this.toggleCameraBtn = document.getElementById('toggleCamera') as HTMLButtonElement;
			this.intervalSlider = document.getElementById('intervalSlider') as HTMLInputElement;
			this.speedSlider = document.getElementById('speedSlider') as HTMLInputElement;
			this.intervalValue = document.getElementById('intervalValue');
			this.speedValue = document.getElementById('speedValue');
			this.recordingsList = document.getElementById('recordingsList');
			this.cameraPlaceholder = document.getElementById('cameraPlaceholder');

			this.canvas = document.createElement('canvas');
			this.ctx = this.canvas.getContext('2d');

			this.init();
		}

		private async init() {
			this.setupEventListeners();
			this.updateStatus('📷 Camera Ready - Click "Enable Camera" to start');
		}

		private setupEventListeners() {
			if (this.toggleCameraBtn) {
				this.toggleCameraBtn.addEventListener('click', () => this.toggleCamera());
			}

			if (this.startBtn) {
				this.startBtn.addEventListener('click', () => this.startRecording());
			}

			if (this.stopBtn) {
				this.stopBtn.addEventListener('click', () => this.stopRecording());
			}

			if (this.downloadBtn) {
				this.downloadBtn.addEventListener('click', () => this.downloadLatest());
			}

			if (this.intervalSlider) {
				this.intervalSlider.addEventListener('input', (e) => {
					const value = parseInt((e.target as HTMLInputElement).value);
					if (this.intervalValue) {
						this.intervalValue.textContent = (value / 1000).toFixed(1) + 's';
					}
				});
			}

			if (this.speedSlider) {
				this.speedSlider.addEventListener('input', (e) => {
					const value = parseInt((e.target as HTMLInputElement).value);
					if (this.speedValue) {
						this.speedValue.textContent = value + ' FPS';
					}
				});
			}
		}

		private async toggleCamera() {
			if (!this.cameraEnabled) {
				try {
					this.stream = await navigator.mediaDevices.getUserMedia({
						video: { width: 1280, height: 720 },
						audio: false
					});
					
					if (this.video) {
						this.video.srcObject = this.stream;
						this.video.style.display = 'block';
					}
					
					if (this.cameraPlaceholder) {
						this.cameraPlaceholder.style.display = 'none';
					}
					
					if (this.toggleCameraBtn) {
						this.toggleCameraBtn.textContent = 'Disable Camera';
						this.toggleCameraBtn.className = this.toggleCameraBtn.className.replace('bg-zinc-900', 'bg-red-600');
					}
					
					this.cameraEnabled = true;
					this.updateUI();
					this.updateStatus('✅ Camera connected successfully!');
					
				} catch (error) {
					this.updateStatus('❌ Camera access denied. Please allow camera permissions.');
					console.error('Camera access error:', error);
				}
			} else {
				// Disable camera
				if (this.stream) {
					this.stream.getTracks().forEach(track => track.stop());
					this.stream = null;
				}
				
				if (this.video) {
					this.video.style.display = 'none';
				}
				
				if (this.cameraPlaceholder) {
					this.cameraPlaceholder.style.display = 'flex';
				}
				
				if (this.toggleCameraBtn) {
					this.toggleCameraBtn.textContent = 'Enable Camera';
					this.toggleCameraBtn.className = this.toggleCameraBtn.className.replace('bg-red-600', 'bg-zinc-900');
				}
				
				this.cameraEnabled = false;
				
				// Stop recording if active
				if (this.isRecording) {
					this.stopRecording();
				}
				
				this.updateUI();
				this.updateStatus('📷 Camera disabled');
			}
		}

		private startRecording() {
			if (this.isRecording || !this.cameraEnabled) return;

			this.isRecording = true;
			this.frames = [];
			const interval = this.intervalSlider ? parseInt(this.intervalSlider.value) : 1000;

			if (this.video && this.ctx) {
				this.canvas.width = this.video.videoWidth;
				this.canvas.height = this.video.videoHeight;

				this.captureInterval = window.setInterval(() => {
					this.captureFrame();
				}, interval);

				this.updateUI();
				this.updateStatus(`🎬 Recording started! Capturing every ${(interval/1000).toFixed(1)}s`);
			}
		}

		private captureFrame() {
			if (!this.isRecording || !this.ctx || !this.video) return;

			this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
			const frameData = this.canvas.toDataURL('image/jpeg', 0.8);
			this.frames.push(frameData);
			
			// Update start button text with frame count
			if (this.startBtn) {
				this.startBtn.textContent = `🔴 Recording... (${this.frames.length} frames)`;
			}
			
			this.updateStatus(`📸 Recording... ${this.frames.length} frames captured`);
		}

		private async stopRecording() {
			if (!this.isRecording) return;

			this.isRecording = false;
			if (this.captureInterval) {
				clearInterval(this.captureInterval);
			}

			if (this.frames.length === 0) {
				this.updateStatus('⚠️ No frames captured. Try recording for a longer duration.');
				this.updateUI();
				return;
			}

			this.updateStatus('⏳ Processing time-lapse video...');
			await this.createTimeLapse();
			this.updateUI();
		}

		private async createTimeLapse(): Promise<void> {
			return new Promise((resolve) => {
				const fps = this.speedSlider ? parseInt(this.speedSlider.value) : 30;
				const frameDuration = 1000 / fps;

				if (!this.ctx) {
					resolve();
					return;
				}

				const mediaRecorder = new MediaRecorder(this.canvas.captureStream(fps), {
					mimeType: 'video/webm'
				});

				const chunks: BlobPart[] = [];
				mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
				mediaRecorder.onstop = () => {
					const blob = new Blob(chunks, { type: 'video/webm' });
					const url = URL.createObjectURL(blob);
					
					const recording: Recording = {
						id: Date.now(),
						url: url,
						blob: blob,
						timestamp: new Date(),
						frameCount: this.frames.length,
						fps: fps,
						duration: (this.frames.length / fps).toFixed(1)
					};

					this.recordings.unshift(recording);
					this.updateRecordingsList();
					this.updateStatus(`✨ Time-lapse created! ${this.frames.length} frames at ${fps}fps`);
					resolve();
				};

				mediaRecorder.start();

				let frameIndex = 0;
				const playFrames = () => {
					if (frameIndex < this.frames.length && this.ctx) {
						const img = new Image();
						img.onload = () => {
							if (this.ctx) {
								this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
								this.ctx.drawImage(img, 0, 0);
								frameIndex++;
								setTimeout(playFrames, frameDuration);
							}
						};
						img.src = this.frames[frameIndex];
					} else {
						mediaRecorder.stop();
					}
				};

				setTimeout(playFrames, 100);
			});
		}

		private updateRecordingsList() {
			if (!this.recordingsList) return;

			if (this.recordings.length === 0) {
				this.recordingsList.innerHTML = `
					<p class="text-center text-black/60 py-8">
						No recordings yet. Start your first time-lapse above! 🎥
					</p>
				`;
				return;
			}

			this.recordingsList.innerHTML = this.recordings.map(recording => `
				<div class="flex items-center gap-4 p-4 bg-white/50 rounded-lg border border-gray-200">
					<video class="w-20 h-15 rounded object-cover" src="${recording.url}" muted loop autoplay></video>
					<div class="flex-1">
						<div class="font-semibold text-black">Time-lapse ${recording.id}</div>
						<div class="text-sm text-black/60">
							${recording.frameCount} frames • ${recording.fps}fps • ${recording.duration}s<br>
							Created: ${recording.timestamp.toLocaleString()}
						</div>
					</div>
					<div class="flex gap-2">
						<button onclick="timeLapse.downloadRecording(${recording.id})" 
								class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-orange-100 hover:text-black">
							💾 Download
						</button>
						<button onclick="timeLapse.playRecording(${recording.id})" 
								class="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-orange-100 hover:text-black">
							▶️ Play
						</button>
					</div>
				</div>
			`).join('');
		}

		public downloadRecording(id: number) {
			const recording = this.recordings.find((r: Recording) => r.id === id);
			if (!recording) return;

			const a = document.createElement('a');
			a.href = recording.url;
			a.download = `timelapse-${recording.id}.webm`;
			document.body.appendChild(a);
			a.click();
			document.body.removeChild(a);
		}

		public playRecording(id: number) {
			const recording = this.recordings.find((r: Recording) => r.id === id);
			if (!recording) return;

			const modal = document.createElement('div');
			modal.style.cssText = `
				position: fixed; top: 0; left: 0; width: 100%; height: 100%;
				background: rgba(0,0,0,0.9); display: flex; align-items: center;
				justify-content: center; z-index: 1000; backdrop-filter: blur(5px);
			`;
			
			modal.innerHTML = `
				<div style="max-width: 90%; max-height: 90%; position: relative;">
					<video controls autoplay style="width: 100%; height: auto; border-radius: 10px; max-height: 80vh;">
						<source src="${recording.url}" type="video/webm">
					</video>
					<button onclick="this.parentElement.parentElement.remove()" 
							style="position: absolute; top: -40px; right: 0; background: white; 
								   border: none; border-radius: 50%; width: 30px; height: 30px; 
								   cursor: pointer; font-size: 18px; font-weight: bold;">×</button>
					<div style="color: white; text-align: center; margin-top: 10px; font-size: 14px;">
						${recording.frameCount} frames • ${recording.fps}fps • ${recording.duration}s
					</div>
				</div>
			`;
			
			document.body.appendChild(modal);
			modal.addEventListener('click', (e) => {
				if (e.target === modal) modal.remove();
			});
		}

		private downloadLatest() {
			if (this.recordings.length > 0) {
				this.downloadRecording(this.recordings[0].id);
			}
		}

		private updateUI() {
			if (this.toggleCameraBtn) {
				this.toggleCameraBtn.disabled = false;
			}
			
			if (this.startBtn) {
				this.startBtn.disabled = this.isRecording || !this.cameraEnabled;
				if (!this.isRecording) {
					this.startBtn.textContent = '▶ Start Timelapse';
				}
			}
			
			if (this.stopBtn) {
				this.stopBtn.disabled = !this.isRecording;
			}
			
			if (this.downloadBtn) {
				this.downloadBtn.disabled = this.recordings.length === 0;
			}
		}

		private updateStatus(message: string) {
			// You can add a status element if needed, or just console log for now
			console.log(message);
			
			// If you have a status element, update it here
			// const statusEl = document.getElementById('status');
			// if (statusEl) statusEl.textContent = message;
		}
	}

	// Initialize when DOM is loaded
	document.addEventListener('DOMContentLoaded', () => {
		(window as any).timeLapse = new TimeLapseRecorder();
	});
</script>
